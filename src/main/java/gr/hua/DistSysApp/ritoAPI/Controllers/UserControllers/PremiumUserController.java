package gr.hua.DistSysApp.ritoAPI.Controllers.UserControllers;

import gr.hua.DistSysApp.ritoAPI.Repositories.UserRepository;
import gr.hua.DistSysApp.ritoAPI.Services.PremiumUserService;
import gr.hua.DistSysApp.ritoAPI.Services.PremiumUserServiceException;
import gr.hua.DistSysApp.ritoAPI.exceptionHandling.ResourceNotFoundException;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PremiumUserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private PremiumUserService premiumUserService;

    @GetMapping(path="/premiumUser/showLiveMatchStats")
    public String showLiveMatchStats () throws JSONException, PremiumUserServiceException, ResourceNotFoundException {
        try {
            JSONObject response = premiumUserService.showLiveMatchStats();
            if (response==null) throw new ResourceNotFoundException("User is not in an active game");
            return  response.toString();
        }catch (PremiumUserServiceException e){
            throw new PremiumUserServiceException("Internal Server Exception while getting exception");
        }
    }

    @GetMapping(path="/premiumUser/requestTopPlayersProfiles")
    public String requestTopPlayersProfiles () throws JSONException, PremiumUserServiceException, ResourceNotFoundException {
        try{
            JSONObject response = premiumUserService.requestTopPlayersProfiles();
            if (response==null) throw new ResourceNotFoundException("Error while making the request");
            return response.toString();
        }catch (PremiumUserServiceException e){
            throw new PremiumUserServiceException("Internal Server Exception while getting exception");
        }
    }

    @GetMapping(path="/premiumUser/showTopPlayersProfiles")
    @ResponseBody
    public String showTopPlayersProfiles (@RequestParam int requestId) throws JSONException, PremiumUserServiceException, ResourceNotFoundException {
        try{
            JSONObject response = premiumUserService.showRequestResults(requestId);
            if (response==null) throw new ResourceNotFoundException("Top Players Profiles could not be found");
            return response.toString();
        }catch (PremiumUserServiceException e){
            throw new PremiumUserServiceException("Internal Server Exception while getting exception");
        }
    }

    @GetMapping(path="/premiumUser/requestGeneralChampionStats")
    public String requestGeneralChampionStats () throws JSONException, PremiumUserServiceException, ResourceNotFoundException {
        try{
            JSONObject response = premiumUserService.requestGeneralChampionStats();
            if (response==null) throw new ResourceNotFoundException("Error while making the request");
            return response.toString();
        }catch (PremiumUserServiceException e){
            throw new PremiumUserServiceException("Internal Server Exception while getting exception");
        }
    }

    @GetMapping(path="/premiumUser/showGeneralChampionStats")
    @ResponseBody
    public String showGeneralChampionStats (@RequestParam int requestId) throws JSONException, PremiumUserServiceException, ResourceNotFoundException {
        try{
            JSONObject response = premiumUserService.showRequestResults(requestId);
            if (response==null) throw new ResourceNotFoundException("Could not load General Champion Stats");
            return response.toString();
        }catch (PremiumUserServiceException e){
            throw new PremiumUserServiceException("Internal Server Exception while getting exception");
        }
    }

    @GetMapping(path="/premiumUser/PremiumCancel")
    public String requestPremiumCancel () throws JSONException, PremiumUserServiceException, ResourceNotFoundException {
        try{
            JSONObject response = premiumUserService.requestPremiumCancel();
            if (response==null) throw new ResourceNotFoundException("Cancellation request could not be register to the system. Please try again later ");
            return response.toString();
        }catch (PremiumUserServiceException e){
            throw new PremiumUserServiceException("Internal Server Exception while getting exception");
        }

    }
}
